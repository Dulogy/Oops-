#include<iostream>
using namespace std;
class Student{
    public:
    int rollNumber ;
    int age ;

    private:
    string name ;

    public:
    // call destructor to deallocate memory  it call after all work is done in main function
    
    ~student() ;
    
// constructor to avoid default values in objects
    // parameterized constructor for 2 arguments
    Student(int rn, int age){
        this -> rollNumber = rn ;
        this  -> age = age ;
    }
// parameterized constructor for 3 arguments
    Student(int rn, int age,string name){
        this -> rollNumber = rn ;
        this -> age = age ;
        this -> name = name ;
    }

    void display(){
        cout << name <<"\t"<< age <<"\t" << rollNumber <<"\n";
    }

    void setName(string s){
        name = s ;
    }

    string getName(){
        return name ;
    }
    
};
int main(){
    // creates objects statically
    Student s1(100,21);
    s1.setName("durgesh") ;
    s1.display() ;
    Student s2(101,20,"kumar") ;
    s2.display() ;
    // create object dynamically
    Student *s3 = new Student(102,22,"ddd") ;
    s3 -> display() ;

    // copy constructor 
    Student s4(s1) ;
    s4.display() ;

    Student *s5 = new Student(*s3) ;
    s5 -> display() ;

    Student s6(*s3) ;
    s6.display() ;

    Student * s7 = new Student(s2) ;
    s7 -> display() ;
    
    // copy assignment operator 
     // use after creation of both objects 
     *s7 = s1 ;
     s7 -> display() ;

     s6 = s1 ;
     s6.display() ;

    delete s3,s5,s7 ;  // dynamically created object present in heap so deallocate it manually 
}
